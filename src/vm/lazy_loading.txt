1) Load calls load_segment()

2) Load_segement() loads the stack page first into physical memory and creates an STP_entry to represent it in virtual memory 
	Q: Does this mean that we need to change load_segment to know which page is the stack page? Are we guaranteed the stack page starts at the given file offset?

3) The while loop in load_segment() then creates STP_entry's that are correlated to each page in Virtual Memory. These pages have not been loaded into Physical memory yet, but they are recognized as existing in Virtual Memory. When these pages are accessed in Virtual Memory, a page fault occurs which will trigger us to load the physical pages of the executable file

4) In the page fault handler, we have access to the current thread and we are given the virtual address of the page faulting page. From here, we must round down our virtual address to the the closest page.

5) We then need to get the SPT_entry associated with this page of virtual memory.

6) This SPT_entry should have the information that load_segmented needed in order to load the file into physical memory, such as the file, offset, and writable. We don't need the read or zero bytes since we know we are going to get a PGSIZE of the file, unless we reach the end of the file, and we can calculate the zero_bytes in that case using the output of file_read.

7) It would be hear that we would file_read, memset, and install_page the file from disk into physical memory


if(DEBUG)
    printf("f: %s rb: %d off: %d zb: %d \n", file->file_name_);
  ASSERT ((read_bytes + zero_bytes) % PGSIZE == 0);
  ASSERT (pg_ofs (upage) == 0);
  ASSERT (ofs % PGSIZE == 0);

  file_seek (file, ofs);
  while (read_bytes > 0 || zero_bytes > 0) 
    {
      /* Calculate how to fill this page.
         We will read PAGE_READ_BYTES bytes from FILE
         and zero the final PAGE_ZERO_BYTES bytes. */
      size_t page_read_bytes = read_bytes < PGSIZE ? read_bytes : PGSIZE;
      size_t page_zero_bytes = PGSIZE - page_read_bytes;

      /* Get a page of memory. */
      // ---------------------------------------------------------------
      // uint8_t *kpage = palloc_get_page (PAL_USER); OLD LOGIC
      if(/*stack page*/)
      uint8_t *kpage = get_user_page();
      
      if(DEBUG)
        printf("load_segment: current frame is %s\n", thread_current()->name);
      // tid, stackptr, frame number

      int frame_number = frameptr_to_frame_num(kpage);
      struct SPT_entry* stack_spte = create_SPT_entry(thread_current()->tid, NULL, NULL, upage);


      if(DEBUG)
        printf("passing to SPT: tid %d, frame no. %d, stackptr %x\n", thread_current()->tid, frame_number, kpage);


      // Ali: setting SPT_entry.stack_ptr = kpage
      // need to initialize SPT_entry to something before insertion
      //struct SPT_entry* new_SPT_entry = create_SPT_entry(thread_current()->tid, frame_number, NULL/*stack page?*/);
      //new_SPT_entry->stack_ptr = kpage;
      //ASSERT(is_stack_spt_entry(new_SPT_entry));
      // file?
      // ofs?
      // upage?
      // read_bytes?
      // zero_bytes?
      // writable?


      if(DEBUG)
        printf("kpage ptr gotten: %p\n", kpage);
      // ---------------------------------------------------------------
      if (kpage == NULL)
        return false;

      size_t page_read_bytes = file_read (file, kpage, read_bytes);
      size_t page_zero_bytes = PGSIZE - page_read_bytes;

      /* Load this page. */
      /*
      if (file_read (file, kpage, page_read_bytes) != (int) page_read_bytes)
        {
          palloc_free_page (kpage); // must change this
          if(DEBUG)
            printf("LOAD_SEGMENT: bad file read\n");
          return false; 
        }
        */
      // ---------------------------------------------
      /* Ali:
         This memset should instead be done when a page fault occurs
         (aka, TA slide) ONLY load the original stack frame at program startup.
        
         memset() just sets null terminating address for our new frame 
         (aka, set offset to 0), but since we don't actually put anything
         in our frame until a page fault occurs, we don't need to set a null
         terminating value yet.

         Thus, I think we just need to store the pointer to the stack page (kpage)
         inside of its STE. We should probably also store the arguments that are
         passed to load_segment within the same STE 
      */
      // ---------------------------------------------
      // if(page_zero_bytes)
      //   memset (kpage + page_read_bytes, 0, page_zero_bytes);

      //  Add the page to the process's address space. 
      // if (!install_page (upage, kpage, writable)) 
      //   {
      //     palloc_free_page (kpage);
      //     return false; 
      //   }


       /* Advance. */
       read_bytes -= page_read_bytes;
       zero_bytes -= page_zero_bytes;
       upage += PGSIZE;
     }
  if(DEBUG)
    printf("load_segment completed with status true\n");
  return true;